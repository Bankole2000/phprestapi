  PROJECT: Building a REST API with PHP and MYSQL
DESCRIPTION: 
A REST API for Blog Posts.
FEATURES: API handles all requests to 
‚ñ∂Ô∏è Get All Posts
‚ñ∂Ô∏è Get single Post by ID
‚ñ∂Ô∏è Edit/Update single Post by ID
‚ñ∂Ô∏è Delete Single Post by ID

TASK: 1. 
üèó Create the database structure in PhpMyAdmin
‚≠êÔ∏èEach Resource should have its own integral table for 
its data/properties, and foreign keys for joins with other
resources/tables. 

TASK: 2.
üöß Create config folder 
In that folder make a Database.php Class file
with connection params and public function connect()

TASK: 3. 
üìì Create a Models folder 
This will contain the basic resources as Classes.
1Ô∏è‚É£ Post.php class for Blog Posts and the 
2Ô∏è‚É£ Category.php class for Categories 
‚≠êÔ∏è Each Model/table/Resource should have it's own Class! 
as well as prepared statements for handling queries
Each class will contain a private $table property for the resource 
and a $conn variable for connecting to the database, as well as 
public properties matching those to be used in the database. 

TASK: 4. 
üíª Create Post Model Connection Methods (functions)
The Post class will have a __construct method that takes in the $db
parameter and makes a database connection.
This also goes for any other resource class. 
This will also hold the public functions, 
‚û°Ô∏è read(), to get all Posts
‚û°Ô∏è read_single(), to get single post by ID
‚û°Ô∏è create(), to create a single post 
‚û°Ô∏è delete(), to delete a single post
‚≠êÔ∏è If this were another resource the same functions would apply
Each of the public functions will contain 
1Ô∏è‚É£ the SQL Query, 2Ô∏è‚É£ Prepared statement, 3Ô∏è‚É£ statement Execution, and 
4Ô∏è‚É£ Return any data or variables if necessary.
‚ö†Ô∏è Each function must correspond to a SINGLE Endpoint.


TASK: 5.
üéÅ Create API folder
This folder will hold the subfolders and files that act as the
endpoints for handling client requests.
‚≠êÔ∏èEach Resource MUST have it's own folder in the API i.e.
üí° /api/{resource}/{action}?{queryStrings if required}
So for example, for the Posts resource we would have 
‚û°Ô∏è /api/post/create.php
‚û°Ô∏è /api/post/read.php
‚û°Ô∏è /api/post/read_single.php?id={id}
‚û°Ô∏è /api/post/update.php
‚û°Ô∏è /api/post/delete.php?id={id}
‚ö†Ô∏è Note! Provide all requirements necessary for request to be processed
i.e. headers, body content etc.

TASK: 6. 
‚úÖ Create End Points
‚ö†Ô∏è Each endpoint MUST include the headers, content type and Access Control
CORS stuff etc. 
‚ö†Ô∏è Each endpoint MUST also include the Database and Resource Class files
Instantiate the Database and Connect, then instantiate the Resource Class.
‚õë The End point will then assign it's data to the properties of the 
Resource Class instantiated, then Call the method in that class to perform 
the requested action (i.e. read, read_single, create, or delete methods).
Then return whatever needs to be returned (either echo or print_r in json_encoded form).
‚ö†Ô∏è Each Endpoint MUST correspond to a Single function in the resource Class.


